{"version":3,"sources":["components/Header.js","components/Form.js","components/Error.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","buscarClima","e","preventDefault","respuesta","ciudad","ciudadRef","current","value","pais","paisRef","datosConsulta","React","createRef","onSubmit","ref","id","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$result","result","name","weather","main","urlIcon","concat","icon","alt","temp","toFixed","src","App","setState","error","consulta","consultaAPI","_this$state$consulta","state","urlAPI","fetch","then","response","json","data","resultado","catch","err","console","log","prevProps","prevState","cod","components_Error","components_Clima","components_Header","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAoBeA,EAjBA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAEXH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,eAAeJ,EAAMM,YCoDhDC,cA1DX,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KAMVe,YAAc,SAACC,GACXA,EAAEC,iBAGF,IAAMC,EAAY,CACdC,OAAQX,EAAKY,UAAUC,QAAQC,MAC/BC,KAAMf,EAAKgB,QAAQH,QAAQC,OAG/Bd,EAAKR,MAAMyB,cAAcP,IAdzBV,EAAKY,UAAYM,IAAMC,YACvBnB,EAAKgB,QAAUE,IAAMC,YAHNnB,wEAsBf,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,QAAMyB,SAAUjB,KAAKI,aACjBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,SAAO0B,IAAKlB,KAAKS,UAAWU,GAAG,SAASC,KAAK,SAC7C9B,EAAAC,EAAAC,cAAA,SAAO6B,QAAQ,UAAf,WAEJ/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,UAAQ0B,IAAKlB,KAAKa,SACdvB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,GAAGW,cAAY,GAA7B,oBACAhC,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,MAAd,aACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,MAAd,YACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,MAAd,cACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,MAAd,aACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,MAAd,kBACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,MAAd,aACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,MAAd,YAEJrB,EAAAC,EAAAC,cAAA,SAAO6B,QAAQ,QAAf,SAEJ/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDACXH,EAAAC,EAAAC,cAAA,SAAO4B,KAAK,SAAS3B,UAAU,qDAC3BkB,MAAM,0BA/CvBY,aCkBJC,EAjBD,SAACnC,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACVJ,EAAMoC,aCgChBC,6MArCXC,iBAAmB,WAAM,IAAAC,EAES/B,EAAKR,MAAMwC,OAAlCC,EAFcF,EAEdE,KAAMC,EAFQH,EAERG,QAASC,EAFDJ,EAECI,KAEtB,IAAIF,IAASC,IAAYC,EAAM,OAAO,KAEtC,IACMC,EAAO,mCAAAC,OAAsCH,EAAQ,GAAGI,KAAjD,QACTC,EAAG,YAAAF,OAAeJ,GACtB,OACIxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACZH,EAAAC,EAAAC,cAAA,iCAAyBsC,GACzBxC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,YACeuC,EAAKK,KAV3B,QAU0CC,QAAQ,GAD3C,SAEIhD,EAAAC,EAAAC,cAAA,OAAK+C,IAAKN,EAASG,IAAKA,kFAUhD,OACI9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVO,KAAK2B,2BA/BFJ,aC+ELiB,cA1Eb,SAAAA,EAAYnD,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACjB3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMX,KAaRyB,cAAgB,SAAAP,GACU,KAArBA,EAAUC,QAAmC,KAAlBD,EAAUK,KACtCf,EAAK4C,SAAS,CACZC,OAAO,IAGT7C,EAAK4C,SAAS,CACZE,SAAUpC,EACVmC,OAAO,KAtBM7C,EA2BnB+C,YAAc,WAAM,IAAAC,EACIhD,EAAKiD,MAAMH,SAA1BnC,EADWqC,EACXrC,OAAOI,EADIiC,EACJjC,KACd,IAAIJ,IAAWI,EAAM,OAAO,KAE5B,IACMmC,EAAM,oDAAAb,OAAuD1B,EAAvD,KAAA0B,OAAiEtB,EAAjE,WAAAsB,OADE,oCAGdc,MAAMD,GACHE,KAAK,SAAAC,GACJ,OAAOA,EAASC,SACjBF,KAAM,SAAAG,GACLvD,EAAK4C,SAAS,CACZY,UAAWD,MAEZE,MAAM,SAAAC,GACPC,QAAQC,IAAI,qBAAuBF,MAxCvC1D,EAAKiD,MAAQ,CACXJ,OAAO,EACPC,SAAU,GACVU,UAAW,IALIxD,kFAQA6D,EAAWC,GACzBA,EAAUhB,WAAa3C,KAAK8C,MAAMH,UACnC3C,KAAK4C,+CAqCD,IAGFS,EAHGX,EAAS1C,KAAK8C,MAAdJ,MACAkB,EAAO5D,KAAK8C,MAAMO,UAAlBO,IAWP,OAPEP,EADEX,EACUpD,EAAAC,EAAAC,cAACqE,EAAD,CAAOpC,QAAS,kCACX,QAARmC,EACGtE,EAAAC,EAAAC,cAACqE,EAAD,CAAOpC,QAAU,yBAEjBnC,EAAAC,EAAAC,cAACsE,EAAD,CAAOjC,OAAU7B,KAAK8C,MAAMO,YAIxC/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuE,EAAD,CACApE,OAAU,gBAEVL,EAAAC,EAAAC,cAACwE,EAAD,CACClD,cAAiBd,KAAKc,gBAErBuC,UArEQ9B,aCOE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.4951e6ac.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapper light-blue darken-2\">\r\n                    {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\r\n                    <a href=\"#\" className=\"brand-logo \">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ciudadRef = React.createRef();\r\n        this.paisRef = React.createRef();\r\n    }\r\n    \r\n\r\n    buscarClima = (e) => {\r\n        e.preventDefault();\r\n\r\n        //leer los refs y crear el objeto\r\n        const respuesta = {\r\n            ciudad: this.ciudadRef.current.value,\r\n            pais: this.paisRef.current.value,\r\n        }\r\n        //enviar por props\r\n        this.props.datosConsulta(respuesta);\r\n        // opcional reset el form\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.buscarClima}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input ref={this.ciudadRef} id=\"ciudad\" type=\"text\"/>\r\n                                <label htmlFor=\"ciudad\">Ciudad</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.paisRef}>\r\n                                    <option value=\"\" defaultValue>Elige un país</option>\r\n                                    <option value=\"AR\">Argentina</option>\r\n                                    <option value=\"CO\">Colombia</option>\r\n                                    <option value=\"CR\">Costa Rica</option>\r\n                                    <option value=\"ES\">España</option>\r\n                                    <option value=\"US\">Estados Unidos</option>\r\n                                    <option value=\"MX\">México</option>\r\n                                    <option value=\"PE\">Perú</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">Pais</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\"\r\n                                    value=\"Buscar...\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nForm.propTypes = {\r\n    datosConsulta: PropTypes.func.isRequired,\r\n}\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Error = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Error;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nclass Clima extends Component {\r\n\r\n    mostrarResultado = () => {\r\n        //obtener los datos de la consulta\r\n        const {name, weather, main} = this.props.result\r\n\r\n        if(!name || !weather || !main) return null;\r\n\r\n        let kelvin = 273.15\r\n        const urlIcon = `http://openweathermap.org/img/w/${weather[0].icon}.png`\r\n        let alt = `clima de ${name}`;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>Resultado Clima de: {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: { (main.temp - kelvin).toFixed(2) } &deg;C\r\n                                <img src={urlIcon} alt={alt}/>\r\n                            </p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.mostrarResultado()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nClima.propTypes = {\r\n    result: PropTypes.object.isRequired,\r\n}\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Error from './components/Error';\nimport Clima from './components/Clima';\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      consulta: {},\n      resultado: {},\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.consulta !== this.state.consulta){\n      this.consultaAPI();\n    }\n  }\n\n  datosConsulta = respuesta => {\n    if(respuesta.ciudad === '' || respuesta.pais ===''){\n      this.setState({\n        error: true\n      })\n    }else{\n      this.setState({\n        consulta: respuesta,\n        error: false\n      })\n    }\n  }\n\n  consultaAPI = () => {\n    const {ciudad,pais} = this.state.consulta;\n    if(!ciudad || !pais) return null\n\n    const appId = '6b76f7d74e1610794774ad27146a8381';\n    const urlAPI = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&APPID=${appId}`;\n    //Query con fetch api\n    fetch(urlAPI)\n      .then(response =>  {\n        return response.json()})\n      .then( data => {\n        this.setState({\n          resultado: data\n        });\n      }).catch(err => {\n        console.log('Error Reading data' + err);\n      })\n  }\n\n  render() {\n    const {error} = this.state,\n          {cod} = this.state.resultado;\n\n    let resultado;\n    if (error) {\n      resultado = <Error mensaje =\"Ambos campos son obligatorios\" />;\n    } else if (cod === \"404\"){\n      resultado = <Error mensaje = \"Ciudad no Encontrado\"/>\n    } else {\n      resultado = <Clima result = {this.state.resultado}/>\n    }\n\n    return (\n      <div className=\"app\">\n        <Header\n        titulo = {'Clima React'}\n        />\n        <Form\n         datosConsulta = {this.datosConsulta}\n         />\n         {resultado}\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}